/**************************************************************************
 * \file 		<%= filename %>
 * \brief 		<%= description %>
 * \details 	Implementation of the <%= objnameuc %> object. This file has been
 *          	automatically generated by the VTOL object generator. This is
 *          	an automatically generated file. DO NOT modify manually.
 * \note		Generated from <%= xmlfile %>.
 * \author 		The Orca Team, http://hypebeast.github.com/Orca/
 * 				Copyright (C) 2012 - 2013.
 * \copyright 	The GNU Public License (GPL) Version 3
 **************************************************************************/

/**************************************************************************
* This file is part of the Orca project.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 1, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
**************************************************************************/

#include "orca.h"
#include "<%= headerfile %>"

// Private handle to the VTOL object
static VTOLObjHandle handle = NULL;

// The VTOL object
static <%= namecp %>Data_t <%= namelc %>_data;

/**************************************************************************
* \brief Initializes this object
* \return 0 Success
* \return -1 Failure to initialize or -2 for already initialized
**************************************************************************/
uint8_t <%= objnamelc %>_initialize(void)
{
	// Check if the object is already registered
	if (vtol_obj_get_by_id(<%= objnameuc %>_OBJID) != NULL)
	{
		return -2;
	}

	// Save object handle
	handle = &<%= namelc %>_data;

	// Register object with the VTOL object manager
	uint8_t res = vtol_obj_register(handle, <%= objnameuc %>_OBJID,
					<%= objnameuc %>_ISSINGLEINST, <%= objnameuc %>_ISSETTINGS,
					<%= objnameuc %>_NUMBYTES, &<%= objnamelc %>_set_defaults);
	if (res < 0 )
		return res;

	return 0;
}

/**************************************************************************
* \brief Sets the default values for this object.
*
* \param obj    	The object handle.
* \param instId		Instance id.
**************************************************************************/
void <%= objnamelc %>_set_defaults(VTOLObjHandle obj)
{
	<%= namecp %>Data_t* data = &<%= namelc %>_data;
	VTOLObjMetaData metadata;

	// Initialize object fields to their default values
	<% initfields.each do |field| %>
	<%= field %>
	<% end %>

	// Initialize object metadata fields to their default values
	metadata.flags =
		<%= flightaccess %> << VTOLOBJ_ACCESS_SHIFT |
		<%= gcsaccess %> << VTOLOBJ_GCS_ACCESS_SHIFT |
		<%= teleacked %> << VTOLOBJ_TELEMETRY_ACKED_SHIFT |
		<%= gcsteleacked %> << VTOLOBJ_GCS_TELEMETRY_ACKED_SHIFT |
		<%= teleupdatemode %> << VTOLOBJ_TELEMETRY_UPDATE_MODE_SHIFT |
		<%= gcsteleupdatemode %> << VTOLOBJ_GCS_TELEMETRY_UPDATE_MODE_SHIFT; 	
	metadata.telemetryUpdatePeriod = <%= flighttele_updateperiod %>;
	metadata.gcsTelemetryUpdatePeriod = <%= gcstele_updateperiod %>;
	metadata.loggingUpdatePeriod = <%= logging_updateperiod %>;
	
	// Set the metadata
	vtol_set_metadata(obj, &metadata);
}

/**************************************************************************
* \brief Returns the object handle.
**************************************************************************/
VTOLObjHandle <%= objnamelc %>_handle(void)
{
	return handle;
}

// Getter and setter object functions
<% setgetfunctions.each do |function| %>
<%= function %>
<% end %>