/**************************************************************************
 * \file 		<%= filename %>
 * \brief 		<%= description %>
 * \details 	Implementation of the <%= name %> object. This file has been
 *          	automatically generated by the VTOL object generator. This is
 *          	an automatically generated file. DO NOT modify manually.
 * \note		Generated from <%= xmlfile %>.
 * \author 		The Orca Team, http://hypebeast.github.com/Orca/
 * 				Copyright (C) 2012 - 2013.
 * \copyright 	The GNU Public License (GPL) Version 3
 **************************************************************************/

/**************************************************************************
* This file is part of the Orca project.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 1, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
**************************************************************************/

#ifndef <%= incdefine %>_H_
#define <%= incdefine %>_H_

#include "vtol_object_manager.h"

// Object constants
#define <%= objnameuc %>_OBJID <%= obj_id %>
#define <%= objnameuc %>_ISSINGLEINST <%= issingleinst %>
#define <%= objnameuc %>_ISSETTINGS <%= issettings %>
#define <%= objnameuc %>_NUMBYTES <%= numbytes %> // Size of the VTOLO without the generic VTOLO header

// Object access macros
/***************************************************************************
* \function <%= objnamecp %>Get(dataout)
* \brief Populate a <%= objnamecp %>Data_t object
* \param[out] dataOut
**************************************************************************/
#define <%= objnamecp %>Get(dataOut) vtol_get_data(<%= objnamelc %>_handle(), dataOut)
#define <%= objnamecp %>Set(dataIn) vtol_set_data(<%= objnamelc %>_handle(), dataIn)
#define <%= objnamecp %>Updated() vtol_object_updated(<%= objnamelc %>_handle())
#define <%= objnamecp %>CreateInstance() vtol_create_instance(<%= objnamelc %>_handle(), &<%= objnamelc %>_set_defaults)
#define <%= objnamecp %>GetMetadata(dataOut) vtol_get_metadata(<%= objnamelc %>_handle(), dataOut)
#define <%= objnamecp %>SetMetadata(dataIn) vtol_set_metadata(<%= objnamelc %>_handle(), dataIn)

// Field information
<% enums.each do |enum| %>
<%= enum %>
<% end %>

// Object data
typedef struct {
	struct VTOLObjectData vtolo;

<%= datafields %>
} __attribute__((packed)) <%= namecp %>Data_t;

// Generic interface functions
uint8_t <%= objnamelc %>_initialize(void);
void <%= objnamelc %>_set_defaults(VTOLObjHandle obj);
VTOLObjHandle <%= objnamelc %>_handle(void);

// Get/Set functions
<% setgetfunctionsextern.each do |function| %>
<%= function %>
<% end %>

#endif // <%= incdefine %>_H_