##
##############################################################################
#
# @file       <%= objnamecp %>.py
# @author     The Orca Team, http://hypebeast.github.com/Orca/ Copyright (C) 2012.
# @brief      Implementation of the <%= name %> object. This file has been
#             automatically generated by the vtol_object_generator.
#
# @note       Object definition file: <%= xmlfile %>.
#             This is an automatically generated file.
#             DO NOT modify manually.
#
# @see        The GNU Public License (GPL) Version 3
#
#############################################################################
#
# This file is part of the Matunus project (part of the Orca project).
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

from vtolobject import VTOLObject
from vtolobjectfield import VTOLObjectField
from vtolobjectmetadata import VTOLObjectMetadata


# Object <%= name %> definition
class <%= objnamecp %>(VTOLObject):
    # Object constants
    OBJID = <%= obj_id %>
    NAME = "<%= name %>"
    ISSINGLE = <%= issingleinst %>
    ISSETTINGS = <%= issettings %>

    # Enums
    <% enums.each do |enum| %>
    <%= enum %>
    <% end %>

    # Constructor
    def __init__(self):
        VTOLObject.__init__(self, <%= objnamecp %>.OBJID, "<%= name %>", "<%= description %>")

        # Create object fields
        <% datafields.each do |field| %>
        field = VTOLObjectField("<%= field['name'] %>", <%= field['type'] %>, "<%= field['units'] %>")
        self.addField(field)
        <% end %>

        # Initialize metadata
        metadata = self.getMetadata()
        metadata.access = <%= flightaccess %>
        metadata.gcsAccess = <%= gcsaccess %>
        metadata.telemetryAcked = <%= teleacked %>
        metadata.telemetryUpdateMode = <%= teleupdatemode %>
        metadata.telemetryUpdatePeriod = <%= flighttele_updateperiod %>
        metadata.gcsTelemetryAcked = <%= gcsteleacked %>
        metadata.gcsTelemetryUpdateMode = <%= gcsteleupdatemode %>
        metadata.gcsTelemetryUpdatePeriod = <%= gcstele_updateperiod %>
        metadata.loggingUpdatePeriod = <%= logging_updateperiod %>

        # Set default values, if any
        <% initfields.each do |field| %>
        <%= field %>
        <% end %>

    # Getter functions
    <% getterfunctions.each do |function| %>
    <%= function %>
    <% end %>

    # Setter functions
    <% setterfunctions.each do |function| %>
    <%= function %>
    <% end %>